{"Key":{"Uuid":"b9a20181-2925-4ade-925e-a2fd05fcbf9b","Effect":"#include <cmath>\nextern \"C\"\nvoid score_rgba(unsigned char* rgba, int width, int height, int t)\n{\n    // Use the alpha channel as our fire buffer \n    // Process from top to bottom so we can work in-place\n    \n    // First, apply the fire algorithm from top to bottom\n    for(int j = 0; j < height - 1; j++)\n    {\n        for(int i = 0; i < width; i++)\n        {\n            // Get indices for pixels in the row below\n            int current_idx = (j * width + i) * 4;\n            int below_idx = ((j + 1) * width + i) * 4;\n            \n            // Handle wrap-around for left/right neighbors\n            int left_idx = ((j + 1) * width + ((i - 1 + width) % width)) * 4;\n            int right_idx = ((j + 1) * width + ((i + 1) % width)) * 4;\n            \n            // Classic fire algorithm: average pixels from below\n            int sum = rgba[left_idx + 3] + \n                     rgba[below_idx + 3] + \n                     rgba[right_idx + 3];\n            \n            // Add pixel from 2 rows below if it exists\n            if (j < height - 2) {\n                int below2_idx = ((j + 2) * width + i) * 4;\n                sum += rgba[below2_idx + 3];\n                // Divide by slightly more than 4 for cooling\n                // Using * 32 / 129 is approximately / 4.03125\n                sum = (sum * 32) >> 7;  // Fast approximation of / 4.03125\n            } else {\n                // Near bottom, divide by slightly more than 3\n                sum = (sum * 21) >> 6;  // Approximately / 3.047\n            }\n            \n            // Apply cooling (subtract 1, but with some randomness)\n            if (sum > 0 && ((i ^ j ^ t) & 3) == 0) {\n                sum--;\n            }\n            \n            // Clamp to valid range\n            if (sum < 0) sum = 0;\n            if (sum > 255) sum = 255;\n            \n            rgba[current_idx + 3] = sum;\n        }\n    }\n    \n    // Seed the bottom row with random hot spots\n    for(int i = 0; i < width; i++)\n    {\n        int idx = ((height - 1) * width + i) * 4;\n        \n        // Use LFSR for better pseudo-randomness\n        unsigned int rnd = (i * 37 + t * 23) * 16807;\n        \n        // Most pixels are hot (white), some cooler for variation\n        if ((rnd & 7) > 1) {\n            rgba[idx + 3] = 255;  // Full heat\n        } else {\n            rgba[idx + 3] = 200 + (rnd & 63);  // Slightly cooler\n        }\n    }\n    \n    // Now map the fire intensities to the classic fire palette\n    for(int j = 0; j < height; j++)\n    {\n        for(int i = 0; i < width; i++)\n        {\n            int idx = (j * width + i) * 4;\n            int fire_val = rgba[idx + 3];\n            \n            // Classic DOS fire palette progression:\n            // Black -> Dark Red -> Red -> Orange -> Yellow -> White\n            \n            if (fire_val < 8) {\n                // Black to very dark red\n                rgba[idx] = fire_val * 8;\n                rgba[idx + 1] = 0;\n                rgba[idx + 2] = 0;\n            }\n            else if (fire_val < 32) {\n                // Dark red to red\n                rgba[idx] = 64 + (fire_val - 8) * 8;\n                rgba[idx + 1] = 0;\n                rgba[idx + 2] = 0;\n            }\n            else if (fire_val < 56) {\n                // Pure red\n                rgba[idx] = 255;\n                rgba[idx + 1] = 0;\n                rgba[idx + 2] = 0;\n            }\n            else if (fire_val < 96) {\n                // Red to orange\n                rgba[idx] = 255;\n                rgba[idx + 1] = (fire_val - 56) * 6;\n                rgba[idx + 2] = 0;\n            }\n            else if (fire_val < 138) {\n                // Orange to yellow\n                rgba[idx] = 255;\n                rgba[idx + 1] = 240 + (fire_val - 96) / 3;\n                rgba[idx + 2] = (fire_val - 96) * 2;\n            }\n            else if (fire_val < 200) {\n                // Yellow\n                rgba[idx] = 255;\n                rgba[idx + 1] = 255;\n                rgba[idx + 2] = 84 + (fire_val - 138) * 2;\n            }\n            else {\n                // Yellow to white\n                rgba[idx] = 255;\n                rgba[idx + 1] = 255;\n                rgba[idx + 2] = 208 + (fire_val - 200);\n            }\n        }\n    }\n}"},"Name":"Fog","Preset":[]}