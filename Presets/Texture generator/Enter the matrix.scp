{"Key":{"Uuid":"b9a20181-2925-4ade-925e-a2fd05fcbf9b","Effect":"#include <cmath>\n#include <vector>\n\n// Global state for Matrix effect\nstruct MatrixColumn {\n    float y;          // Current y position (float for smooth movement)\n    int length;       // Trail length\n    float speed;      // Fall speed\n    int char_idx;     // Current character index\n    int change_timer; // Timer for character changes\n};\n\nstatic std::vector<MatrixColumn> columns;\nstatic std::vector<unsigned char> fade_buffer;\nstatic bool initialized = false;\n\nextern \"C\"\nvoid score_rgba(unsigned char* rgba, int width, int height, int t)\n{\n    // Simple 5x7 font - numbers, letters, and symbols\n    static const unsigned char font[][5] = {\n        {0x3E, 0x51, 0x49, 0x45, 0x3E}, // 0\n        {0x00, 0x42, 0x7F, 0x40, 0x00}, // 1\n        {0x42, 0x61, 0x51, 0x49, 0x46}, // 2\n        {0x21, 0x41, 0x45, 0x4B, 0x31}, // 3\n        {0x18, 0x14, 0x12, 0x7F, 0x10}, // 4\n        {0x27, 0x45, 0x45, 0x45, 0x39}, // 5\n        {0x3C, 0x4A, 0x49, 0x49, 0x30}, // 6\n        {0x01, 0x71, 0x09, 0x05, 0x03}, // 7\n        {0x36, 0x49, 0x49, 0x49, 0x36}, // 8\n        {0x06, 0x49, 0x49, 0x29, 0x1E}, // 9\n        {0x7E, 0x11, 0x11, 0x11, 0x7E}, // A\n        {0x7F, 0x49, 0x49, 0x49, 0x36}, // B\n        {0x3E, 0x41, 0x41, 0x41, 0x22}, // C\n        {0x7F, 0x41, 0x41, 0x22, 0x1C}, // D\n        {0x7F, 0x49, 0x49, 0x49, 0x41}, // E\n        {0x7F, 0x09, 0x09, 0x09, 0x01}, // F\n        {0x00, 0x36, 0x36, 0x00, 0x00}, // :\n        {0x00, 0x56, 0x36, 0x00, 0x00}, // ;\n        {0x08, 0x14, 0x22, 0x41, 0x00}, // \n        {0x14, 0x14, 0x14, 0x14, 0x14}, // =\n        {0x00, 0x41, 0x22, 0x14, 0x08}, // >\n        {0x02, 0x01, 0x51, 0x09, 0x06}, // ?\n        {0x7C, 0x12, 0x11, 0x12, 0x7C}, // Ð¯ (fake Cyrillic)\n        {0x7F, 0x10, 0x08, 0x04, 0x7F}, // N\n        {0x00, 0x00, 0x7F, 0x00, 0x00}, // |\n        {0x20, 0x10, 0x08, 0x04, 0x02}, // /\n    };\n    const int num_chars = sizeof(font) / sizeof(font[0]);\n    \n    // Character spacing and sizing\n    const int char_width = 6;\n    const int char_height = 8;\n    const int num_columns = width / char_width;\n    \n    // Initialize on first frame\n    if (!initialized) {\n        columns.resize(num_columns);\n        fade_buffer.resize(width * height);\n        \n        // Initialize columns with staggered starts\n        for(int i = 0; i < num_columns; i++) {\n            columns[i].y = -((i * 7) % (height / 2));\n            columns[i].length = 10 + (i * 13) % 15;\n            columns[i].speed = 0.3f + (i % 5) * 0.15f;\n            columns[i].char_idx = (i * 7) % num_chars;\n            columns[i].change_timer = i % 10;\n        }\n        \n        // Clear fade buffer\n        for(int i = 0; i < width * height; i++) {\n            fade_buffer[i] = 0;\n        }\n        \n        initialized = true;\n    }\n    \n    // Fade existing brightness in fade buffer\n    for(int i = 0; i < width * height; i++) {\n        if (fade_buffer[i] > 4) {\n            fade_buffer[i] = fade_buffer[i] * 15 / 16;\n        } else {\n            fade_buffer[i] = 0;\n        }\n    }\n    \n    // Update and draw columns\n    for(int col = 0; col < num_columns; col++) {\n        MatrixColumn& c = columns[col];\n        \n        // Update position\n        c.y += c.speed;\n        \n        // Update character change timer\n        c.change_timer--;\n        if (c.change_timer <= 0) {\n            c.char_idx = (c.char_idx + 1 + (t >> 2)) % num_chars;\n            c.change_timer = 5 + (col % 8);\n        }\n        \n        // Reset column when it falls off screen\n        if (c.y - c.length * char_height > height) {\n            c.y = -10 - ((t + col * 17) % 40);\n            c.length = 8 + ((t + col * 13) % 20);\n            c.speed = 0.3f + ((t + col) % 5) * 0.15f;\n        }\n        \n        // Draw column trail\n        for(int trail = 0; trail < c.length; trail++) {\n            int char_y = (int)(c.y) - trail * char_height;\n            \n            // Skip if outside screen\n            if (char_y < -char_height || char_y >= height) continue;\n            \n            // Calculate brightness\n            int brightness;\n            if (trail == 0) {\n                // Lead character - bright white\n                brightness = 255;\n            } else {\n                // Trail - fading green\n                brightness = 255 * (c.length - trail) / c.length;\n            }\n            \n            // Select character (varies along trail)\n            int char_to_draw = (c.char_idx + trail / 2) % num_chars;\n            \n            // Draw character to fade buffer\n            for(int cy = 0; cy < 7; cy++) {\n                for(int cx = 0; cx < 5; cx++) {\n                    if (font[char_to_draw][cx] & (1 << cy)) {\n                        int px = col * char_width + cx;\n                        int py = char_y + cy;\n                        \n                        if (px < width && py >= 0 && py < height) {\n                            int buf_idx = py * width + px;\n                            \n                            // Update fade buffer with max brightness\n                            if (trail == 0) {\n                                fade_buffer[buf_idx] = brightness;\n                            } else {\n                                int current = fade_buffer[buf_idx];\n                                if (brightness > current) {\n                                    fade_buffer[buf_idx] = brightness;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Convert fade buffer to RGBA\n    for(int j = 0; j < height; j++) {\n        for(int i = 0; i < width; i++) {\n            int buf_idx = j * width + i;\n            int rgba_idx = buf_idx * 4;\n            int brightness = fade_buffer[buf_idx];\n            \n            if (brightness > 200) {\n                // Very bright - white with green tint\n                rgba[rgba_idx] = brightness * 3 / 4;\n                rgba[rgba_idx + 1] = brightness;\n                rgba[rgba_idx + 2] = brightness * 3 / 4;\n            } else if (brightness > 100) {\n                // Medium - bright green\n                rgba[rgba_idx] = 0;\n                rgba[rgba_idx + 1] = brightness;\n                rgba[rgba_idx + 2] = brightness / 8;\n            } else {\n                // Dim - dark green\n                rgba[rgba_idx] = 0;\n                rgba[rgba_idx + 1] = brightness;\n                rgba[rgba_idx + 2] = 0;\n            }\n            rgba[rgba_idx + 3] = 255;\n        }\n    }\n}"},"Name":"Enter the matrix","Preset":[]}